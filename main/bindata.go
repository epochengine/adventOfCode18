// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// resources/frequency_input.txt
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesFrequency_inputTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x57\x5d\xce\xe4\x30\x08\x7b\xcf\x55\xa2\x48\x0d\xf9\x6b\xee\x7f\xb1\x11\xb6\xa1\x23\xed\xb7\xd3\xa6\x29\x01\x63\x0c\x6d\xfd\x94\x66\x4f\x69\x7d\x95\x66\xa5\x9d\xd2\x66\x69\xfd\xc5\xd5\x2a\x6d\x97\xda\x77\xa9\xbb\x54\x3c\xac\xfd\x2d\x75\x96\x76\x4b\x1b\xc5\xdf\xad\x17\x4f\x2e\x36\x77\x2b\xb5\xbb\x2d\x7f\xb6\xb1\x7f\x95\xfa\x96\xea\x87\xf8\xda\x03\x6b\xad\x97\x4a\xeb\x37\xf7\x75\x2b\xad\x77\xec\xac\x9d\x96\x7b\x87\x13\x17\x0f\x61\x65\xe3\x38\x3e\x6e\x38\xc8\x74\xdd\x65\xe1\xc0\xd5\xee\x21\xf0\x38\x38\x5a\xdd\xa1\x89\xb3\x70\xf9\x96\xd6\xa7\xfb\xd6\xb6\xaf\xbb\x33\x5b\x67\x8e\x52\xed\x29\x75\xd0\xf6\x8a\x1f\xb8\x3d\x60\xb9\x3a\x52\xfd\x72\x9f\xdf\x1b\x1d\xb4\xc3\x8d\xbe\x7a\x85\x43\xd7\x6f\xfc\x10\x99\xa7\x54\x33\xa1\x10\x71\xf5\x8b\x14\x54\xae\x63\xa5\x27\xac\x38\x7a\x33\x04\xa1\x7c\x33\x07\x11\x27\x4f\x65\x7a\x8c\x01\x2a\x99\x58\xea\x4a\x2b\xbc\x5f\x84\xf5\x49\xd4\xf8\x68\x7c\x46\xfc\x7e\x3a\x52\x0e\xf7\x12\x01\x00\x5e\x2f\xd5\x2e\x91\xf2\x33\x08\xf0\x12\xe8\x2f\x2e\x17\x40\xc2\x96\x45\xd7\xe8\xff\x20\x00\x2f\x02\x07\x7c\x0f\x77\xf2\xd0\xb6\x75\xfe\xe4\x6d\x27\xeb\xb0\xe9\xa5\xc7\x9b\x2e\xbd\x30\xd7\xf9\xbf\xa2\x08\x9f\x3a\xb3\xb3\xf8\x92\xe1\x2c\x40\x2e\xd7\x1a\xdf\x21\xb5\x82\x3d\x7e\xf7\x12\x56\x02\x4e\x66\x32\x41\x4d\x64\x64\x06\x86\xb0\x04\x2e\xfe\x68\x92\x73\x0c\xc5\x63\xb0\x45\x94\xba\xf3\xc8\xa9\x74\xf9\xfe\x24\xc7\xcc\xe4\x90\x88\xe3\xce\x2c\xe6\x68\xf3\xe0\x0e\x8a\xce\x24\x8f\x53\x8b\x58\x63\x65\x88\x20\x6f\xae\xea\x6a\xd0\x93\xf7\xbf\x8c\x1d\x13\x59\xba\x7f\xa9\x7e\x4a\xb3\x23\xe2\xf2\x6c\x80\x69\xb4\x67\x4c\xb7\x21\x4b\xa0\xb1\x91\x78\x4d\xd5\x30\xb9\xf2\x46\x05\x34\xd5\xb9\x0a\xf5\x8a\xfb\x21\x1e\xa2\xb0\x0a\x5c\x55\x27\x22\xb2\x38\x6a\x86\x08\x35\x9a\xff\xfa\x43\x75\xaa\x9b\x40\x4a\x42\x8c\xdc\xb8\x7f\xb4\x65\xaa\x13\xec\x7a\x75\x80\x49\x56\x6e\xa4\x90\x74\x01\x10\x0a\x06\x51\x78\xb2\x58\xdf\xd5\x26\x33\xa9\x47\xd2\x17\x1a\x1f\x70\x6c\xa4\x94\xe1\x9d\x83\x08\xa4\x55\x38\xed\x30\xf8\x13\xd4\x06\xf5\x0f\x18\x33\xb0\x7c\xc5\x9e\xc8\x37\xff\xe1\x7d\xe4\xb2\x41\x19\x9b\x3d\xa9\x0e\xe0\xe6\xa6\x3a\x8d\x8f\x00\x43\x7a\xb4\x93\x73\x5e\x20\x2f\x0d\x77\x59\x61\x46\xdc\xd7\x57\x90\x92\x0a\xa8\x5b\x63\x08\x88\xcb\x6f\x59\x7c\xfc\x63\x9a\x2a\x68\xe4\x70\xd9\xa5\xb5\xa1\x1c\xdf\x52\x47\x2f\xf5\xaa\x0c\x86\x72\x33\xe8\x0c\x95\x37\xb0\xef\xaa\xfb\x43\x94\x17\xe3\x58\x51\x40\xd1\x77\x20\x4a\xac\x85\x29\x61\xd9\x28\xe5\xf8\x91\x4a\x4b\xdc\x9f\x50\x34\xf7\x7f\x8a\xb3\x0f\x91\x8b\x3a\x51\x9e\x5f\xa5\xf7\x89\x54\x50\x09\x78\x06\xf3\x63\x2a\x0f\x49\xb0\x8d\xec\x46\x95\xd0\xa0\xcc\x09\xbb\x0d\xd2\x84\x35\x6f\xcc\x65\xdd\x94\x8c\xc1\x1a\xb6\x91\x72\xdd\x95\x4d\x4f\xe1\x28\x6d\x6c\x26\xcd\x59\xc0\x4e\x60\xaa\x18\x53\x7d\x79\x9b\x08\xbd\x39\x54\xcd\xb0\xb1\x54\x97\x5e\x5f\x72\x7e\x2e\xd2\xee\x32\x4e\xb7\xf7\xc2\xc7\xba\xdd\x1d\x94\xd6\xa5\x35\x8f\xf1\x22\x7c\xd7\xbe\x41\x2f\xdf\x6e\x67\x66\x07\xc3\x1e\x1e\x72\x52\x96\xe4\x85\xfa\x13\xeb\x61\x29\xeb\x93\xfc\x3f\xaa\xca\x27\x64\x1f\x35\xad\x77\x76\x12\xbc\x31\x70\x0a\xac\xf2\x11\x38\x87\xc8\x91\x3b\x9b\x2c\xdf\x4c\xdb\xcc\xde\x74\x98\x23\x15\xd7\x26\x9d\x7a\x7a\x40\xe0\xd5\x60\xf0\xfb\x91\xd6\xb2\x29\x03\xa6\x91\x04\xdc\x7f\x1d\x71\x44\x65\x81\x8f\x52\xfe\x15\x73\x49\x1d\xa9\x10\xec\x4d\x4b\x65\x4a\x4d\xb9\x0a\x58\x2c\x3b\xd1\x94\xbe\x21\xe7\x48\x37\x03\x34\x1d\xf9\x75\x3b\xb0\x10\x40\x35\x8b\x10\x7a\xe6\x04\x9c\x90\x5a\x62\x79\x89\x3a\x4f\xf6\x76\x4d\x61\x43\xb3\x12\x05\x71\x42\x28\xdf\x0c\x5c\x00\xef\x52\x67\x88\xdc\xa0\x86\xa8\x29\xf7\x11\xb9\x42\x14\x52\xed\x93\xee\x25\xc4\x23\x27\x37\x0d\x8d\xec\xf3\xea\x9c\x9a\x6f\x34\x1d\xa8\x80\xed\xf9\x3a\xbe\x1a\x85\xda\xc6\xf9\xfa\x83\x65\x03\xed\x3c\x4e\xd3\x90\x14\xaa\xaa\xdb\x4f\x0d\x2e\xc6\x5e\xc2\x4c\x86\x18\xc2\x10\xb9\x36\x65\xf6\x32\x88\x9d\xad\x87\xa3\xa7\x44\xcc\x6b\xfa\x92\x24\x16\x0d\x2a\xe6\x9a\xec\xa8\xa0\xcc\x9b\x73\x87\xda\x30\x9b\x2f\xc9\x70\xb2\x4e\x28\x6a\x2b\x7b\x49\x5b\x1f\x9f\xa9\x8c\x52\x36\x96\xf7\xf8\xea\xcd\x24\x51\x37\x29\x1a\x4a\xb1\xc4\xd6\xc1\xa3\x31\x7c\x49\x2f\x6a\x0c\xaa\x43\x13\x6e\x8d\x49\x47\x23\x2c\xee\x63\x1e\x8c\xf1\x32\x35\xf2\xc9\x0c\x8a\xfb\x28\x28\x82\xa3\x58\x3e\x39\x6f\x26\xbc\xd3\x5a\x8b\xc6\x11\x90\x66\x2b\xc2\xdf\x2b\x5e\xd7\xab\x16\xa4\xa8\xa3\x19\x2b\xa6\x7e\xbe\xe6\xff\x4d\xc4\x5e\xd7\x60\xd3\xfd\x2f\xce\x1a\x2c\x57\x5f\xd4\xfc\xb4\xbe\x66\x32\xbf\x8f\x8e\x6c\xce\x6c\xbc\x21\x55\x18\xc8\x38\xa7\x2d\x34\x35\x88\xd0\x42\x8a\x8d\xb9\x6f\xc6\xd1\xa2\x1f\xcd\x76\xc1\x70\xf5\x04\xb4\x1d\x55\xe3\xe8\x84\x24\x1a\xd6\x0a\x9e\xb7\x91\xac\x11\x95\x38\x82\xbd\x9c\xf0\x4c\x9f\x07\x53\x23\x8d\x1b\x24\x1d\x63\xb8\xd0\xa8\x5a\xe3\x13\x25\xc6\x05\xd5\xa0\x68\xc9\x4f\xba\x1d\xdf\x14\xd1\x05\x2d\xe7\x42\x18\x5e\xdf\x10\xaa\xc9\xd9\x77\x8c\x05\x43\xce\x23\x37\xce\xf1\x79\xd0\x5b\xb5\xf5\xda\x73\x40\xc8\xb9\x99\x35\x35\x24\x89\x84\x9e\x9f\x69\x1a\x31\xc5\x6d\x06\x61\xcf\x19\xe5\x17\x00\x00\xff\xff\xc8\x6e\x9b\xaa\x81\x0e\x00\x00")

func resourcesFrequency_inputTxtBytes() ([]byte, error) {
	return bindataRead(
		_resourcesFrequency_inputTxt,
		"resources/frequency_input.txt",
	)
}

func resourcesFrequency_inputTxt() (*asset, error) {
	bytes, err := resourcesFrequency_inputTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/frequency_input.txt", size: 3713, mode: os.FileMode(420), modTime: time.Unix(1543842776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/frequency_input.txt": resourcesFrequency_inputTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"frequency_input.txt": &bintree{resourcesFrequency_inputTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
